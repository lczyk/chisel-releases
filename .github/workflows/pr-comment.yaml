# Generic PR comment workflow
# 
# This workflow listens for completion of other workflows and posts PR comments
# when those workflows upload a "pr-comment-data" artifact containing JSON with:
# {
#   "pr-number": <number>,
#   "message-id": "<string>", 
#   "message": "<string>"
# }
#
# To use this from another workflow:
# 1. Create a JSON file with the above structure
# 2. Upload it as an artifact named "pr-comment-data" using actions/upload-artifact@v4
# 3. Add your workflow name to the "workflows" list below

name: Post PR comment

on:
  workflow_run:
    workflows: ["Pkg coverage"]
    types:
      - completed

jobs:
  post-comment:
    name: Post PR comment
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion != 'skipped'
    permissions:
      pull-requests: write
    steps:
      - name: Download PR comment artifact
        uses: actions/download-artifact@v5
        with:
          name: pr-comment-data
          run-id: ${{ github.event.workflow_run.id }}
        continue-on-error: true

      - name: Parse comment data
        id: comment-data
        run: |
          if [ -f pr-comment.json ]; then
            # Parse JSON and set outputs
            pr_number=$(jq -r '.["pr-number"]' pr-comment.json)
            message_id=$(jq -r '.["message-id"]' pr-comment.json)
            message=$(jq -r '.message' pr-comment.json)
            
            echo "pr-number=$pr_number" >> $GITHUB_OUTPUT
            echo "message-id=$message_id" >> $GITHUB_OUTPUT
            
            # Write message to file for mshick/add-pr-comment
            echo "$message" > pr-comment-message.txt
            
            echo "Found comment data: PR #$pr_number, message-id: $message_id"
          else
            echo "No pr-comment.json found, skipping comment"
            exit 0
          fi

      - name: Post comment to PR
        if: steps.comment-data.outputs.pr-number != '' && steps.comment-data.outputs.pr-number != 'null'
        uses: mshick/add-pr-comment@v2
        with:
          message-path: pr-comment-message.txt
          issue: ${{ steps.comment-data.outputs.pr-number }}
          message-id: ${{ steps.comment-data.outputs.message-id }}